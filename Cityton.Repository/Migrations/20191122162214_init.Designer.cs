// <auto-generated />
using System;
using Cityton.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cityton.Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191122162214_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Cityton.Data.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FromChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromChallengeId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Cityton.Data.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Statement")
                        .IsUnique();

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2019, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chien trop chou",
                            Statement = "Faire une photo avec un chien",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Début d'un amour",
                            Statement = "Avoir le numéro de quelqu'un",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2019, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ô belles boules",
                            Statement = "Faire une vidéo devant l'Atomium",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2019, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grande mais petite",
                            Statement = "Faire une photo sur la grande place",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 9,
                            CreatedAt = new DateTime(2019, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bonne et bien chaude",
                            Statement = "Faire une vidéo en mangeant une gauffre",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.ChallengeGiven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengedGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengedGroupId");

                    b.ToTable("ChallengesGiven");
                });

            modelBuilder.Entity("Cityton.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxGroupSize")
                        .HasColumnType("int");

                    b.Property<int>("MinGroupSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxGroupSize = 6,
                            MinGroupSize = 4,
                            Name = "Bruxton"
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Cityton.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Cityton.Data.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContainedInId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Extension")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Cityton.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Cityton.Data.Models.ParticipantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BelongingGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BelongingGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ParticipantGroups");
                });

            modelBuilder.Entity("Cityton.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 0,
                            Email = "admin01@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "0123456789",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Username = "admin01"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 0,
                            Email = "admin02@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "9876543210",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Username = "admin02"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 0,
                            Email = "admin03@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "0147852963",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Username = "admin03"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 0,
                            Email = "checker01@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "3692581470",
                            Picture = "do\\not\\know",
                            Role = 1,
                            Username = "checker01"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 0,
                            Email = "checker02@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "7539518524",
                            Picture = "do\\not\\know",
                            Role = 1,
                            Username = "checker02"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 0,
                            Email = "member01@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "4568521593",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Username = "member01"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 0,
                            Email = "member02@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "7419635802",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Username = "member02"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 0,
                            Email = "member03@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "0172839976",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Username = "member03"
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 0,
                            Email = "member04@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "7538527419",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Username = "member04"
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = 0,
                            Email = "member05@gmail.com",
                            PasswordHash = new byte[] {  },
                            PasswordSalt = new byte[] {  },
                            PhoneNumber = "9638520153",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Username = "member05"
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.UserInDiscussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("UsersInDiscussion");
                });

            modelBuilder.Entity("Cityton.Data.Models.Achievement", b =>
                {
                    b.HasOne("Cityton.Data.Models.Challenge", "FromChallenge")
                        .WithMany("Achievements")
                        .HasForeignKey("FromChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "Winner")
                        .WithMany("Achievements")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.Challenge", b =>
                {
                    b.HasOne("Cityton.Data.Models.User", "Author")
                        .WithMany("Challenges")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.ChallengeGiven", b =>
                {
                    b.HasOne("Cityton.Data.Models.Challenge", "Challenge")
                        .WithMany("ChallengeGivens")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.Group", "ChallengedGroup")
                        .WithMany("ChallengesGiven")
                        .HasForeignKey("ChallengedGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.Media", b =>
                {
                    b.HasOne("Cityton.Data.Models.Message", "ContainedIn")
                        .WithOne("Media")
                        .HasForeignKey("Cityton.Data.Models.Media", "MessageId");
                });

            modelBuilder.Entity("Cityton.Data.Models.Message", b =>
                {
                    b.HasOne("Cityton.Data.Models.User", "Author")
                        .WithMany("MessagesWriten")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.ParticipantGroup", b =>
                {
                    b.HasOne("Cityton.Data.Models.Group", "BelongingGroup")
                        .WithMany("Members")
                        .HasForeignKey("BelongingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "User")
                        .WithMany("ParticipantGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.User", b =>
                {
                    b.HasOne("Cityton.Data.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.UserInDiscussion", b =>
                {
                    b.HasOne("Cityton.Data.Models.Discussion", "Discussion")
                        .WithMany("UsersInDiscussion")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "Participant")
                        .WithMany("UsersInDiscussion")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
