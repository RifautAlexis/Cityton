// <auto-generated />
using System;
using Cityton.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cityton.Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191130140829_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Cityton.Data.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FromChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromChallengeId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Cityton.Data.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Statement")
                        .IsUnique();

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2019, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chien trop chou",
                            Statement = "Faire une photo avec un chien",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedAt = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Début d'un amour",
                            Statement = "Avoir le numéro de quelqu'un",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2019, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ô belles boules",
                            Statement = "Faire une vidéo devant l'Atomium",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CreatedAt = new DateTime(2019, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grande mais petite",
                            Statement = "Faire une photo sur la grande place",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 9,
                            CreatedAt = new DateTime(2019, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bonne et bien chaude",
                            Statement = "Faire une vidéo en mangeant une gauffre",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.ChallengeGiven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengedGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengedGroupId");

                    b.ToTable("ChallengesGiven");
                });

            modelBuilder.Entity("Cityton.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxGroupSize")
                        .HasColumnType("int");

                    b.Property<int>("MinGroupSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxGroupSize = 6,
                            MinGroupSize = 4,
                            Name = "Bruxton"
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Cityton.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Cityton.Data.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContainedInId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Extension")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Cityton.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Cityton.Data.Models.ParticipantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BelongingGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BelongingGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ParticipantGroups");
                });

            modelBuilder.Entity("Cityton.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Email = "admin01@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "6019911684 ",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxIiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.GcTOWUdwVBuMMK5i2CfThwHPYV7BBzSbRJScSOVoMps",
                            Username = "admin01"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Email = "admin02@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "3069338796 ",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIyIiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0._M8LdsCBFFI4bYNe38LmR6WQyoDslo_o5NvkrYQRHgE",
                            Username = "admin02"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Email = "admin03@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "105989609 ",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIzIiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.8P-T2n9TvWdDZyKKOT5fBq2RAzU2j0vgSzdlff17syg",
                            Username = "admin03"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            Email = "admin04@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "4866078694 ",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI0IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.BthUU8xL3BdjB2Kl3urQFpmKV-kzw7PBPEc-VeZOytg",
                            Username = "admin04"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 1,
                            Email = "admin05@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "8659710084 ",
                            Picture = "do\\not\\know",
                            Role = 2,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI1IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.D_eFZ83fFG3fkGntfMWdS2YGWbKH5mDJj1vNpNNgF3U",
                            Username = "admin05"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 1,
                            Email = "checker01@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "5844956388 ",
                            Picture = "do\\not\\know",
                            Role = 1,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI2IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.X2_mVZgL6c11JAN1UhHFlRIy2FzON-UKjY_fRQGqeNA",
                            Username = "checker01"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 1,
                            Email = "checker02@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "1669765414 ",
                            Picture = "do\\not\\know",
                            Role = 1,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI3IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.FbsETyAnK4GHL6NkTbOFvlAv5B369Et5p2KUzeFrKJk",
                            Username = "checker02"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 1,
                            Email = "checker03@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "5598781614 ",
                            Picture = "do\\not\\know",
                            Role = 1,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI4IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.OViMNtpZTppgc8mfbVIitAgWT35vujK8T_bL1ETHA2Y",
                            Username = "checker03"
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 1,
                            Email = "member01@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "3272464106 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI5IiwibmJmIjoxNTc1MTIyOTA4LCJleHAiOjE1NzU3Mjc3MDgsImlhdCI6MTU3NTEyMjkwOH0.dl8Jga67X8pJ-7KKs-JJC14TvQCaLeqg2GSg_MSwGVI",
                            Username = "member01"
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = 1,
                            Email = "member02@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "5414887288 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMCIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.OLlFS4-OCw5cPwFtAmXRSe1uuokiIJDDDehC4M0Lo04",
                            Username = "member02"
                        },
                        new
                        {
                            Id = 11,
                            CompanyId = 1,
                            Email = "member03@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "4786399505 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMSIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.yWG89y3MIgNAjulUFw6aAEGy_JeD6e8GQrpHvS_8P1w",
                            Username = "member03"
                        },
                        new
                        {
                            Id = 12,
                            CompanyId = 1,
                            Email = "member04@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "2358305614 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMiIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.V6woWEwQvQShjrUBcyAopp59lMWI1RZHUZ20wxRx1cc",
                            Username = "member04"
                        },
                        new
                        {
                            Id = 13,
                            CompanyId = 1,
                            Email = "member05@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "1064846605 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMyIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9._KZZy74Cqlv2oZCxIGQepYrw74XZ2J1nKKmM-a3aktw",
                            Username = "member05"
                        },
                        new
                        {
                            Id = 14,
                            CompanyId = 1,
                            Email = "member06@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "4686272886 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxNCIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.4gRNAS0qTczv8aqwEkyXNmZoHaW1tZHI3v6dvXmdejQ",
                            Username = "member06"
                        },
                        new
                        {
                            Id = 15,
                            CompanyId = 1,
                            Email = "member07@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "5071973872 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxNSIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.6ulHRMbomsCoTK0T5T3LYlD1fsQ-oh4pV__dICNqWxQ",
                            Username = "member07"
                        },
                        new
                        {
                            Id = 16,
                            CompanyId = 1,
                            Email = "member08@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "334355105 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxNiIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.eD5Scb6PkPd8J6URxiBvGTODwRWnaNGsCklfVNuLT8E",
                            Username = "member08"
                        },
                        new
                        {
                            Id = 17,
                            CompanyId = 1,
                            Email = "member09@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "5471673152 ",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxNyIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.zaLDgJ9caaUM7TJ_nDwdscj9aXptfERgbsc7596T1GU",
                            Username = "member09"
                        },
                        new
                        {
                            Id = 18,
                            CompanyId = 1,
                            Email = "member10@gmail.com",
                            PasswordHash = new byte[] { 160, 129, 112, 37, 2, 20, 60, 102, 148, 76, 60, 204, 160, 7, 91, 137, 93, 84, 222, 102, 228, 2, 69, 237, 31, 140, 9, 142, 205, 28, 69, 176, 55, 176, 53, 177, 43, 144, 61, 177, 23, 211, 33, 4, 244, 176, 101, 66, 213, 136, 74, 210, 36, 200, 140, 215, 66, 113, 118, 140, 223, 68, 243, 59 },
                            PasswordSalt = new byte[] { 243, 93, 100, 116, 18, 141, 208, 161, 50, 21, 131, 44, 67, 141, 218, 211, 191, 15, 169, 154, 120, 178, 9, 20, 126, 210, 247, 24, 15, 164, 214, 247, 207, 188, 24, 241, 116, 136, 106, 179, 96, 198, 97, 150, 176, 147, 255, 189, 155, 174, 94, 238, 152, 88, 111, 162, 188, 126, 36, 133, 185, 13, 241, 7, 99, 79, 110, 186, 187, 39, 250, 231, 249, 171, 214, 5, 154, 118, 179, 249, 0, 131, 224, 231, 104, 124, 148, 153, 113, 71, 250, 132, 47, 29, 198, 36, 166, 145, 244, 194, 45, 19, 32, 24, 201, 214, 28, 214, 161, 123, 234, 108, 51, 134, 71, 101, 212, 123, 203, 224, 25, 143, 71, 209, 130, 247, 77, 212 },
                            PhoneNumber = "8758801056",
                            Picture = "do\\not\\know",
                            Role = 0,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxOCIsIm5iZiI6MTU3NTEyMjkwOCwiZXhwIjoxNTc1NzI3NzA4LCJpYXQiOjE1NzUxMjI5MDh9.ZUCMe5yhGw1HKPHoAtTUVHblCiqfXPiuzdUxAqWhE8g",
                            Username = "member10"
                        });
                });

            modelBuilder.Entity("Cityton.Data.Models.UserInDiscussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("UsersInDiscussion");
                });

            modelBuilder.Entity("Cityton.Data.Models.Achievement", b =>
                {
                    b.HasOne("Cityton.Data.Models.Challenge", "FromChallenge")
                        .WithMany("Achievements")
                        .HasForeignKey("FromChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "Winner")
                        .WithMany("Achievements")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.Challenge", b =>
                {
                    b.HasOne("Cityton.Data.Models.User", "Author")
                        .WithMany("Challenges")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.ChallengeGiven", b =>
                {
                    b.HasOne("Cityton.Data.Models.Challenge", "Challenge")
                        .WithMany("ChallengeGivens")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.Group", "ChallengedGroup")
                        .WithMany("ChallengesGiven")
                        .HasForeignKey("ChallengedGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.Media", b =>
                {
                    b.HasOne("Cityton.Data.Models.Message", "ContainedIn")
                        .WithOne("Media")
                        .HasForeignKey("Cityton.Data.Models.Media", "MessageId");
                });

            modelBuilder.Entity("Cityton.Data.Models.Message", b =>
                {
                    b.HasOne("Cityton.Data.Models.User", "Author")
                        .WithMany("MessagesWriten")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.ParticipantGroup", b =>
                {
                    b.HasOne("Cityton.Data.Models.Group", "BelongingGroup")
                        .WithMany("Members")
                        .HasForeignKey("BelongingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "User")
                        .WithMany("ParticipantGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.User", b =>
                {
                    b.HasOne("Cityton.Data.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cityton.Data.Models.UserInDiscussion", b =>
                {
                    b.HasOne("Cityton.Data.Models.Discussion", "Discussion")
                        .WithMany("UsersInDiscussion")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cityton.Data.Models.User", "Participant")
                        .WithMany("UsersInDiscussion")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
